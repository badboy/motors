use super::Data;
use super::Data::*;

#[pub]
template -> Vec<Data>
  = "\n"* lns:line ** "\n" {
      let mut out = Vec::new();
      for l in lns.iter() {
          out.push_all(l);
      }
      out
    }

line -> Vec<Data>
  = (code / variable / plain)*

code -> Data
  = "%" space* s:(simple_condition / comment) { s }

simple_condition -> Data
  = s:condition { let (t,c,e) = s; Condition(t,c,e) }

comment -> Data
  = "#" [^\n]+ { Comment(match_str.to_string()) }

condition -> (String, Vec<Data>, Option<Vec<Data>>)
  = s:if "\n" c:line "\n%" e:(else)? space* end {
      (s, c, e)
  }

if -> String
  = "if" space+ s:statement { s }

else -> Vec<Data>
  = space* "else" space* "\n" c:line "\n%" { c }

end  -> String
  = "end" space* { "end".to_string() }

statement -> String
  = (!"\n" .)+ { match_str.to_string() }

variable -> Data
  = "{{" space*
    ident:identifier
    space* "}}" {
      Variable(ident.to_string())
    }

identifier -> String
  = [a-zA-z]+ { match_str.to_string() }

space
  = " " / "\t" / "\v"

plain -> Data
  = ![%] ([^{\n]+ / ( "{" [^}\n]+ ) ) {
      Text(match_str.to_string())
    }
